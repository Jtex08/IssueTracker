@model IssueTracker.Models.TicketEditViewModel

@{
    ViewData["Title"] = "Edit";
}

    <section class="content-header">
        <h1>
            Edit Ticket
        </h1>
        <ol class="breadcrumb">
            <li><a href="/"><i class="fa fa-dashboard"></i> Home</a></li>
            <li><a href="/Tickets">Tickets</a></li>
            <li class="active">Edit</li>
        </ol>
    </section>

<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.Created)
        @Html.HiddenFor(model => model.Updated)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <textarea data-val="true" data-val-required="Description is required" class="form-control" id="Description" name="Description" rows="4">@Model.Description</textarea>
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <p class="not-editable">
                    @*project isn't editable after creation of ticket*@
                    @Html.DisplayFor(model => model.ProjectTitle)
                </p>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PercentComplete, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PercentComplete, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PercentComplete, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TicketStatuses, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.SelectedStatus, Model.TicketStatuses, "-Select Status-", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SelectedStatus, "", new { @class = "text-danger" })
             </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TicketTypes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.SelectedType, Model.TicketTypes, "-Select Type-", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SelectedType, "", new { @class = "text-danger" })
            </div>
         </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TicketPriorities, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                        @Html.DropDownListFor(m => m.SelectedPriority, Model.TicketPriorities, "-Select Priority-", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SelectedPriority, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.OwnerUserId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                don't need to check for null case, we assign string "unassigned" in controller for nulls
                <p class="not-editable">
                    user assignment not editable in this view - follow link to assign the user
                    @Model.OwnerUserId
                </p>
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Tickets", "Index")
</div>